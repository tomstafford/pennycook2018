pwr.t.test(n=,d=0.5,sig.level=0.05,power=0.8,type="two.sample",alternative="greater")
library(pwr)
pwr.t.test(n=,d=0.5,sig.level=0.05,power=0.8,type="paired")
pwr.t.test(n=,d=0.2,sig.level=0.05,power=0.8,type="paired")
pwr.t.test(n=,d=0.2,sig.level=0.1,power=0.8,type="paired")
pwr.t.test(n=,d=0.3,sig.level=0.1,power=0.8,type="paired")
pwr.t.test(n=,d=0.4,sig.level=0.1,power=0.8,type="paired")
install.packages("TOSTER").
install.packages("TOSTER")
library(TOSTER)
library(TOSTER)
TOSTER::powerTOSTpaired(alpha = 0.05, statistical_power = 0.9, low_eqbound_dz = 0.1, high_eqbound_dz = 0.1) should give you the required number of sample pairs for these parameters (1083).
TOSTER::powerTOSTpaired(alpha = 0.05, statistical_power = 0.9, low_eqbound_dz = 0.1, high_eqbound_dz = 0.1)
pwr.t.test(n=,d=0.1,sig.level=0.05,power=0.9,type="two.sample",alternative="greater")
library(pwr)
pwr.t.test(n=,d=0.1,sig.level=0.05,power=0.9,type="two.sample",alternative="greater")
pwr.t.test(n=,d=0.2,sig.level=0.05,power=0.9,type="two.sample",alternative="greater")
TOSTER::powerTOSTpaired(alpha = 0.05, statistical_power = 0.9, low_eqbound_dz = 0.2, high_eqbound_dz = 0.2)
TOSTER::powerTOSTpaired(alpha = 0.05, statistical_power = 0.9, low_eqbound_dz = 0.15, high_eqbound_dz = 0.15)
pwr.t.test(n=,d=0.15,sig.level=0.05,power=0.9,type="two.sample",alternative="greater")
pwr.t.test(n=,d=0.124,sig.level=0.05,power=0.9,type="two.sample",alternative="greater")
require(visreg)
install.packages('visreg')
require(visreg)
fit <- lm(Ozone ~ Solar.R,data=airquality)
visreg(fit)
dat = read.csv("/home/tom/Dropbox/university/toys/pennycook2018/dprimedata_wide.csv")
m1 =lm(C, ~ CRT, data=dat)
m1 =lm(C ~ CRT, data=dat)
summary(m1)
visreg(m1)
setwd("/home/tom/t.stafford@sheffield.ac.uk/A_UNIVERSITY/toys/pennycook2018")
# hello Jenny https://github.com/jennybc/here_here
wide_data <- read.csv("dprimedata_wide.csv",header=TRUE, sep=",", na.strings="-999", dec=".", strip.white=TRUE)
wide_data$sub <- as.factor(wide_data$X)
#I create the long form here because the long form csv seemed to have a glitch (the CRT values were included in the dprime column)
long_data <- gather(wide_data, type, dprime, C:N, factor_key=TRUE) #this function comes from the tidyr library
long_data$sub <- as.factor(long_data$sub)
#type is factor
#dprime and CRT are numerical, I think that's okay
mean(wide_data$CRT)
mean(long_data$CRT) #these two give the same value, as they should
wide_data$sub <- as.factor(wide_data$X)
long_data <- gather(wide_data, type, dprime, C:N, factor_key=TRUE) #this function comes from the tidyr library
library(lme4)
library(lmerTest)
library(plyr)
library(tidyverse)
library(car)
long_data <- gather(wide_data, type, dprime, C:N, factor_key=TRUE) #this function comes from the tidyr library
long_data$sub <- as.factor(long_data$sub)
mean(wide_data$CRT)
mean(long_data$CRT) #these two give the same value, as they should
contrasts(long_data$type) <- contr.sum
mod1 <- lmer(dprime ~ 1 + type*CRT + (1|sub), data = long_data, verbose = 0, REML = F)
Anova(mod1)
Anova(mod1, type ="III")
dprime_anova <- aov(dprime ~ type*CRT + Error(sub/type), data=long_data) #this gives a weird error message, probably because there's missing data
#at least according to this site (scroll to bottom): https://www.r-bloggers.com/two-way-anova-with-repeated-measures/
summary(dprime_anova)
complete_wide <- wide_data[complete.cases(wide_data), ]
complete_long  <- gather(complete_wide, type, dprime, C:N, factor_key=TRUE)
dprime_anova <- aov(dprime ~ type*CRT + Error(sub/type), data=complete_long) #the error message is gone
summary(dprime_anova)
setwd("/home/tom/t.stafford@sheffield.ac.uk/A_UNIVERSITY/toys/pennycook2018")
wide_data <- read.csv("dprimedata_s1_wide.csv",header=TRUE, sep=",", na.strings="-999", dec=".", strip.white=TRUE)
wide_data$sub <- as.factor(wide_data$X)
long_data <- gather(wide_data, type, dprime, C:N, factor_key=TRUE) #this function comes from the tidyr library
long_data$sub <- as.factor(long_data$sub)
mean(wide_data$CRT)
mean(long_data$CRT) #these two give the same value, as they should
library(lme4)
library(lmerTest)
library(plyr)
library(tidyverse)
library(car)
setwd("/home/tom/t.stafford@sheffield.ac.uk/A_UNIVERSITY/toys/pennycook2018")
wide_data <- read.csv("dprimedata_s1_wide.csv",header=TRUE, sep=",", na.strings="-999", dec=".", strip.white=TRUE)
wide_data$sub <- as.factor(wide_data$X)
long_data <- gather(wide_data, type, dprime, C:N, factor_key=TRUE) #this function comes from the tidyr library
long_data$sub <- as.factor(long_data$sub)
mean(wide_data$CRT)
mean(long_data$CRT) #these two give the same value, as they should
dprime_anova <- aov(dprime ~ type*CRT + Error(sub/type), data=complete_long) #the error message is gone
summary(dprime_anova)
dprime_anova <- aov(dprime ~ type*CRT + Error(sub/type), data=complete_long) #the error message is gone
complete_long  <- gather(complete_wide, type, dprime, C:N, factor_key=TRUE)
complete_wide <- wide_data[complete.cases(wide_data), ]
complete_long  <- gather(complete_wide, type, dprime, C:N, factor_key=TRUE)
dprime_anova <- aov(dprime ~ type*CRT + Error(sub/type), data=complete_long) #the error message is gone
summary(dprime_anova)
wide_data2 <- read.csv("dprimedata_s2_wide.csv",header=TRUE, sep=",", na.strings="-999", dec=".", strip.white=TRUE)
wide_data2$sub <- as.factor(wide_data2$X)
long_data2 <- gather(wide_data2, type, dprime, C:N, factor_key=TRUE) #this function comes from the tidyr library
long_data2 <- gather(wide_data2, type, dprime, C:I, factor_key=TRUE) #this function comes from the tidyr library
long_data2$sub <- as.factor(long_data$sub)
long_data2 <- gather(wide_data2, type, dprime, C:I, factor_key=TRUE) #this function comes from the tidyr library
long_data2 <- gather(wide_data2, type, dprime, dprimeC:dprimeI, factor_key=TRUE) #this function comes from the tidyr library
long_data2$sub <- as.factor(long_data$sub)
long_data2$sub <- as.factor(long_data2$sub)
complete_wide <- wide_data[complete.cases(wide_data), ]
complete_wide <- wide_data2[complete.cases(wide_data2), ]
complete_long2  <- gather(complete_wide2, type, dprime, dprimeC:pdrimeI, factor_key=TRUE)
complete_wide2 <- wide_data2[complete.cases(wide_data2), ]
complete_long2  <- gather(complete_wide2, type, dprime, dprimeC:pdrimeI, factor_key=TRUE)
complete_long2  <- gather(complete_wide2, type, dprime, dprimeC:dprimeI, factor_key=TRUE)
dprime_anova <- aov(dprime ~ type*CRT_ACC + Error(sub/type), data=complete_long) #the error message is gone
dprime_anova <- aov(dprime ~ type*CRT_ACC + Error(sub/type), data=complete_long2) #the error message is gone
summary(dprime_anova)
wide_data <- read.csv("dprimedata_s1_wide.csv",header=TRUE, sep=",", na.strings="-999", dec=".", strip.white=TRUE)
wide_data$sub <- as.factor(wide_data$X)
complete_wide <- wide_data[complete.cases(wide_data), ]
complete_long  <- gather(complete_wide, type, dprime, C:N, factor_key=TRUE)
dprime_anova <- aov(dprime ~ type*CRT + Error(sub/type), data=complete_long) #the error message is gone
summary(dprime_anova)
